{"langchain_trace": {"_type": "wb_trace_tree", "model_hash": "f119e11d07d6994b", "model_dict_dumps": "{\"1_ConversationalRetrievalChain\": {\"inputs\": {\"question\": \"What is the highest-rated movie \", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"answer\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\", \"source_documents\": [{\"page_content\": \"Bullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Murder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"related to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Love Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}], \"generated_question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"repr\": \"ConversationalRetrievalChain(combine_docs_chain=StuffDocumentsChain(llm_chain=LLMChain(prompt=ChatPromptTemplate(input_variables=['context', 'question'], messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=['context'], template=\\\"Use the following pieces of context to answer the users question. \\\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\\\n----------------\\\\n{context}\\\")), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['question'], template='{question}'))]), llm=ChatOpenAI(client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo-0301', temperature=0.0, openai_api_key='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', openai_api_base='', openai_organization='', openai_proxy='')), document_variable_name='context'), question_generator=LLMChain(prompt=PromptTemplate(input_variables=['chat_history', 'question'], template='Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\\\\n\\\\nChat History:\\\\n{chat_history}\\\\nFollow Up Input: {question}\\\\nStandalone question:'), llm=ChatOpenAI(client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo-0301', temperature=0.0, openai_api_key='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', openai_api_base='', openai_organization='', openai_proxy='')), return_source_documents=True, return_generated_question=True, get_chat_history=<function load_db.<locals>.<lambda> at 0x7f9c63f7eac0>, retriever=SelfQueryRetriever(vectorstore=<langchain.vectorstores.chroma.Chroma object at 0x7f9c7c08ff90>, query_constructor=FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"2\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"page\\\": {{\\\\n        \\\"description\\\": \\\"The page from the document\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\\n| OpenAI(client=<class 'openai.api_resources.completion.Completion'>, temperature=0.0, openai_api_key='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', openai_api_base='', openai_organization='', openai_proxy='')\\n| StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>), search_kwargs={'k': 4}, structured_query_translator=<langchain.retrievers.self_query.chroma.ChromaTranslator object at 0x7f9c60964290>, verbose=True))\", \"_kind\": \"ConversationalRetrievalChain\", \"2_LLMChain\": {\"inputs\": {\"question\": \"What is the highest-rated movie \", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"text\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"_kind\": \"LLMChain\", \"llm\": {\"_kind\": \"ChatOpenAI\", \"model_name\": \"gpt-3.5-turbo-0301\", \"temperature\": 0.0}, \"prompt\": {\"_kind\": \"PromptTemplate\", \"input_variables\": [\"chat_history\", \"question\"], \"template\": \"Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\\n\\nChat History:\\n{chat_history}\\nFollow Up Input: {question}\\nStandalone question:\", \"template_format\": \"f-string\", \"partial_variables\": {}}, \"verbose\": false, \"3_ChatOpenAI\": {\"inputs\": {\"prompts\": [\"Human: Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\\n\\nChat History:\\n[['Summarise the text', 'The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.']]\\nFollow Up Input: What is the highest-rated movie \\nStandalone question:\"]}, \"outputs\": {\"generations\": [[{\"text\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"generation_info\": {\"finish_reason\": \"stop\"}, \"message\": {\"_kind\": \"AIMessage\", \"content\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"additional_kwargs\": {}}}]], \"llm_output\": {\"token_usage\": {\"prompt_tokens\": 131, \"completion_tokens\": 66, \"total_tokens\": 197}, \"model_name\": \"gpt-3.5-turbo-0301\"}, \"run\": null}, \"_kind\": \"ChatOpenAI\", \"model_name\": \"gpt-3.5-turbo-0301\", \"temperature\": 0.0}}, \"4_Retriever\": {\"inputs\": {\"query\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"outputs\": {\"documents\": [{\"page_content\": \"Bullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Murder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"related to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Love Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}]}, \"repr\": \"SelfQueryRetriever(vectorstore=<langchain.vectorstores.chroma.Chroma object at 0x7f9c7c08ff90>, query_constructor=FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"2\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"page\\\": {{\\\\n        \\\"description\\\": \\\"The page from the document\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\\n| OpenAI(client=<class 'openai.api_resources.completion.Completion'>, temperature=0.0, openai_api_key='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', openai_api_base='', openai_organization='', openai_proxy='')\\n| StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>), search_kwargs={'k': 4}, structured_query_translator=<langchain.retrievers.self_query.chroma.ChromaTranslator object at 0x7f9c60964290>, verbose=True)\", \"_kind\": \"SelfQueryRetriever\", \"5_RunnableSequence\": {\"inputs\": {\"query\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"outputs\": {\"output\": {\"query\": \" \", \"filter\": null, \"limit\": null}}, \"_kind\": \"RunnableSequence\", \"first\": {\"repr\": \"FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"2\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"page\\\": {{\\\\n        \\\"description\\\": \\\"The page from the document\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\", \"_kind\": \"FewShotPromptTemplate\"}, \"middle\": [{\"_kind\": \"OpenAI\", \"temperature\": 0.0}], \"last\": {\"repr\": \"StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>)\", \"_kind\": \"StructuredQueryOutputParser\"}, \"6_FewShotPromptTemplate\": {\"inputs\": {\"query\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"outputs\": {\"_kind\": \"StringPromptValue\", \"text\": \"Your goal is to structure the user's query to match the request schema provided below.\\n\\n<< Structured Request Schema >>\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\n\\n```json\\n{\\n    \\\"query\\\": string \\\\ text string to compare to document contents\\n    \\\"filter\\\": string \\\\ logical condition statement for filtering documents\\n    \\\"limit\\\": int \\\\ the number of documents to retrieve\\n}\\n```\\n\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\n\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\n\\nA comparison statement takes the form: `comp(attr, val)`:\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\n- `attr` (string):  name of attribute to apply the comparison to\\n- `val` (string): is the comparison value\\n\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\n- `op` (and | or): logical operator\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\n\\nMake sure that you only use the comparators and logical operators listed above and no others.\\nMake sure that filters only refer to attributes that exist in the data source.\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\n\\n\\n<< Example 1. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"teenager love\\\",\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Taylor Swift\\\\\\\"), eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Katy Perry\\\\\\\")), lt(\\\\\\\"length\\\\\\\", 180), eq(\\\\\\\"genre\\\\\\\", \\\\\\\"pop\\\\\\\"))\\\"\\n}\\n```\\n\\n\\n<< Example 2. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs that were not published on Spotify\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\\n\\n\\n<< Example 3. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are three songs about love\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"love\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\\n\\n\\n<< Example 4. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"2\\\",\\n    \\\"attributes\\\": {\\n    \\\"page\\\": {\\n        \\\"description\\\": \\\"The page from the document\\\",\\n        \\\"type\\\": \\\"integer\\\"\\n    }\\n}\\n}\\n```\\n\\nUser Query:\\nWhat is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\\n\\nStructured Request:\\n\"}, \"repr\": \"FewShotPromptTemplate(input_variables=['query'], examples=[{'i': 1, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"teenager love\\\",\\\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Taylor Swift\\\\\\\\\\\"), eq(\\\\\\\\\\\"artist\\\\\\\\\\\", \\\\\\\\\\\"Katy Perry\\\\\\\\\\\")), lt(\\\\\\\\\\\"length\\\\\\\\\\\", 180), eq(\\\\\\\\\\\"genre\\\\\\\\\\\", \\\\\\\\\\\"pop\\\\\\\\\\\"))\\\"\\\\n}}\\\\n```'}, {'i': 2, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are songs that were not published on Spotify', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\\\n}}\\\\n```'}, {'i': 3, 'data_source': '```json\\\\n{{\\\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\\\n    \\\"attributes\\\": {{\\\\n        \\\"artist\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\\\n        }},\\\\n        \\\"length\\\": {{\\\\n            \\\"type\\\": \\\"integer\\\",\\\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\\\n        }},\\\\n        \\\"genre\\\": {{\\\\n            \\\"type\\\": \\\"string\\\",\\\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\\\n        }}\\\\n    }}\\\\n}}\\\\n```', 'user_query': 'What are three songs about love', 'structured_request': '```json\\\\n{{\\\\n    \\\"query\\\": \\\"love\\\",\\\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\\\n    \\\"limit\\\": 2\\\\n}}\\\\n```'}], example_prompt=PromptTemplate(input_variables=['data_source', 'i', 'structured_request', 'user_query'], template='<< Example {i}. >>\\\\nData Source:\\\\n{data_source}\\\\n\\\\nUser Query:\\\\n{user_query}\\\\n\\\\nStructured Request:\\\\n{structured_request}\\\\n'), suffix='<< Example 4. >>\\\\nData Source:\\\\n```json\\\\n{{\\\\n    \\\"content\\\": \\\"2\\\",\\\\n    \\\"attributes\\\": {{\\\\n    \\\"page\\\": {{\\\\n        \\\"description\\\": \\\"The page from the document\\\",\\\\n        \\\"type\\\": \\\"integer\\\"\\\\n    }}\\\\n}}\\\\n}}\\\\n```\\\\n\\\\nUser Query:\\\\n{query}\\\\n\\\\nStructured Request:\\\\n', prefix='Your goal is to structure the user\\\\'s query to match the request schema provided below.\\\\n\\\\n<< Structured Request Schema >>\\\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\\\n\\\\n```json\\\\n{{\\\\n    \\\"query\\\": string \\\\\\\\ text string to compare to document contents\\\\n    \\\"filter\\\": string \\\\\\\\ logical condition statement for filtering documents\\\\n    \\\"limit\\\": int \\\\\\\\ the number of documents to retrieve\\\\n}}\\\\n```\\\\n\\\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\\\n\\\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\\\n\\\\nA comparison statement takes the form: `comp(attr, val)`:\\\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\\\n- `attr` (string):  name of attribute to apply the comparison to\\\\n- `val` (string): is the comparison value\\\\n\\\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\\\n- `op` (and | or): logical operator\\\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\\\n\\\\nMake sure that you only use the comparators and logical operators listed above and no others.\\\\nMake sure that filters only refer to attributes that exist in the data source.\\\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\\\n')\", \"_kind\": \"FewShotPromptTemplate\"}, \"7_OpenAI\": {\"inputs\": {\"prompts\": [\"Your goal is to structure the user's query to match the request schema provided below.\\n\\n<< Structured Request Schema >>\\nWhen responding use a markdown code snippet with a JSON object formatted in the following schema:\\n\\n```json\\n{\\n    \\\"query\\\": string \\\\ text string to compare to document contents\\n    \\\"filter\\\": string \\\\ logical condition statement for filtering documents\\n    \\\"limit\\\": int \\\\ the number of documents to retrieve\\n}\\n```\\n\\nThe query string should contain only text that is expected to match the contents of documents. Any conditions in the filter should not be mentioned in the query as well.\\n\\nA logical condition statement is composed of one or more comparison and logical operation statements.\\n\\nA comparison statement takes the form: `comp(attr, val)`:\\n- `comp` (eq | ne | gt | gte | lt | lte): comparator\\n- `attr` (string):  name of attribute to apply the comparison to\\n- `val` (string): is the comparison value\\n\\nA logical operation statement takes the form `op(statement1, statement2, ...)`:\\n- `op` (and | or): logical operator\\n- `statement1`, `statement2`, ... (comparison statements or logical operation statements): one or more statements to apply the operation to\\n\\nMake sure that you only use the comparators and logical operators listed above and no others.\\nMake sure that filters only refer to attributes that exist in the data source.\\nMake sure that filters only use the attributed names with its function names if there are functions applied on them.\\nMake sure that filters only use format `YYYY-MM-DD` when handling timestamp data typed values.\\nMake sure that filters take into account the descriptions of attributes and only make comparisons that are feasible given the type of data being stored.\\nMake sure that filters are only used as needed. If there are no filters that should be applied return \\\"NO_FILTER\\\" for the filter value.\\nMake sure the `limit` is always an int value. It is an optional parameter so leave it blank if it does not make sense.\\n\\n\\n<< Example 1. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs by Taylor Swift or Katy Perry about teenage romance under 3 minutes long in the dance pop genre\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"teenager love\\\",\\n    \\\"filter\\\": \\\"and(or(eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Taylor Swift\\\\\\\"), eq(\\\\\\\"artist\\\\\\\", \\\\\\\"Katy Perry\\\\\\\")), lt(\\\\\\\"length\\\\\\\", 180), eq(\\\\\\\"genre\\\\\\\", \\\\\\\"pop\\\\\\\"))\\\"\\n}\\n```\\n\\n\\n<< Example 2. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are songs that were not published on Spotify\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\\n\\n\\n<< Example 3. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"Lyrics of a song\\\",\\n    \\\"attributes\\\": {\\n        \\\"artist\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"Name of the song artist\\\"\\n        },\\n        \\\"length\\\": {\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"description\\\": \\\"Length of the song in seconds\\\"\\n        },\\n        \\\"genre\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"description\\\": \\\"The song genre, one of \\\"pop\\\", \\\"rock\\\" or \\\"rap\\\"\\\"\\n        }\\n    }\\n}\\n```\\n\\nUser Query:\\nWhat are three songs about love\\n\\nStructured Request:\\n```json\\n{\\n    \\\"query\\\": \\\"love\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\",\\n    \\\"limit\\\": 2\\n}\\n```\\n\\n\\n<< Example 4. >>\\nData Source:\\n```json\\n{\\n    \\\"content\\\": \\\"2\\\",\\n    \\\"attributes\\\": {\\n    \\\"page\\\": {\\n        \\\"description\\\": \\\"The page from the document\\\",\\n        \\\"type\\\": \\\"integer\\\"\\n    }\\n}\\n}\\n```\\n\\nUser Query:\\nWhat is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\\n\\nStructured Request:\\n\"]}, \"outputs\": {\"generations\": [[{\"text\": \"```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\", \"generation_info\": {\"finish_reason\": \"stop\", \"logprobs\": null}}]], \"llm_output\": {\"token_usage\": {\"completion_tokens\": 28, \"total_tokens\": 1263, \"prompt_tokens\": 1235}, \"model_name\": \"text-davinci-003\"}, \"run\": null}, \"_kind\": \"OpenAI\", \"temperature\": 0.0}, \"8_StructuredQueryOutputParser\": {\"inputs\": {\"input\": \"```json\\n{\\n    \\\"query\\\": \\\"\\\",\\n    \\\"filter\\\": \\\"NO_FILTER\\\"\\n}\\n```\"}, \"outputs\": {\"repr\": \"StructuredQuery(query=' ', filter=None, limit=None)\", \"_kind\": \"StructuredQuery\"}, \"repr\": \"StructuredQueryOutputParser(ast_parse=<bound method Lark.parse of Lark(open('<string>'), parser='lalr', lexer='contextual', ...)>)\", \"_kind\": \"StructuredQueryOutputParser\"}}}, \"9_StuffDocumentsChain\": {\"inputs\": {\"input_documents\": [{\"page_content\": \"Bullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Murder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"related to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\", \"metadata\": {\"page\": 0, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}, {\"page_content\": \"Love Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\", \"metadata\": {\"page\": 1, \"source\": \"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\"}}], \"question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"output_text\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\"}, \"repr\": \"StuffDocumentsChain(llm_chain=LLMChain(prompt=ChatPromptTemplate(input_variables=['context', 'question'], messages=[SystemMessagePromptTemplate(prompt=PromptTemplate(input_variables=['context'], template=\\\"Use the following pieces of context to answer the users question. \\\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\\\n----------------\\\\n{context}\\\")), HumanMessagePromptTemplate(prompt=PromptTemplate(input_variables=['question'], template='{question}'))]), llm=ChatOpenAI(client=<class 'openai.api_resources.chat_completion.ChatCompletion'>, model_name='gpt-3.5-turbo-0301', temperature=0.0, openai_api_key='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', openai_api_base='', openai_organization='', openai_proxy='')), document_variable_name='context')\", \"_kind\": \"StuffDocumentsChain\", \"10_LLMChain\": {\"inputs\": {\"question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"context\": \"Bullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\\n\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\\n\\nrelated to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\n\\nLove Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\"}, \"outputs\": {\"text\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\"}, \"_kind\": \"LLMChain\", \"llm\": {\"_kind\": \"ChatOpenAI\", \"model_name\": \"gpt-3.5-turbo-0301\", \"temperature\": 0.0}, \"prompt\": {\"_kind\": \"ChatPromptTemplate\", \"input_variables\": [\"context\", \"question\"], \"messages\": [{\"_kind\": \"SystemMessagePromptTemplate\", \"prompt\": {\"_kind\": \"PromptTemplate\", \"input_variables\": [\"context\"], \"template\": \"Use the following pieces of context to answer the users question. \\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n{context}\", \"template_format\": \"f-string\", \"partial_variables\": {}}}, {\"_kind\": \"HumanMessagePromptTemplate\", \"prompt\": {\"_kind\": \"PromptTemplate\", \"input_variables\": [\"question\"], \"template\": \"{question}\", \"template_format\": \"f-string\", \"partial_variables\": {}}}]}, \"verbose\": false, \"11_ChatOpenAI\": {\"inputs\": {\"prompts\": [\"System: Use the following pieces of context to answer the users question. \\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\\n\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\\n\\nrelated to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\n\\nLove Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nHuman: What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"]}, \"outputs\": {\"generations\": [[{\"text\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\", \"generation_info\": {\"finish_reason\": \"stop\"}, \"message\": {\"_kind\": \"AIMessage\", \"content\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\", \"additional_kwargs\": {}}}]], \"llm_output\": {\"token_usage\": {\"prompt_tokens\": 1061, \"completion_tokens\": 46, \"total_tokens\": 1107}, \"model_name\": \"gpt-3.5-turbo-0301\"}, \"run\": null}, \"_kind\": \"ChatOpenAI\", \"model_name\": \"gpt-3.5-turbo-0301\", \"temperature\": 0.0}}}}}", "root_span_dumps": "{\"span_id\": \"dfae3e34-846f-428d-b4da-230b1eb06896\", \"name\": \"ConversationalRetrievalChain\", \"start_time_ms\": 1702400120774, \"end_time_ms\": 1702400131042, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 1}, \"results\": [{\"inputs\": {\"question\": \"What is the highest-rated movie \", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"answer\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\", \"source_documents\": [\"<<non-serializable: Document>>\", \"<<non-serializable: Document>>\", \"<<non-serializable: Document>>\", \"<<non-serializable: Document>>\"], \"generated_question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}}], \"child_spans\": [{\"span_id\": \"f3cdc24f-2613-49e1-b525-ee64fa84f964\", \"name\": \"LLMChain\", \"start_time_ms\": 1702400120775, \"end_time_ms\": 1702400128012, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 2}, \"results\": [{\"inputs\": {\"question\": \"What is the highest-rated movie \", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"text\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}}], \"child_spans\": [{\"span_id\": \"6fa4a8f7-fba6-4613-8e51-8f22102045dc\", \"name\": \"ChatOpenAI\", \"start_time_ms\": 1702400120776, \"end_time_ms\": 1702400128011, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"invocation_params\": {\"model\": \"gpt-3.5-turbo-0301\", \"model_name\": \"gpt-3.5-turbo-0301\", \"request_timeout\": null, \"max_tokens\": null, \"stream\": false, \"n\": 1, \"temperature\": 0.0, \"_type\": \"openai-chat\", \"stop\": null}, \"options\": {\"stop\": null}, \"execution_order\": 3, \"llm_output\": {\"token_usage\": {\"prompt_tokens\": 131, \"completion_tokens\": 66, \"total_tokens\": 197}, \"model_name\": \"gpt-3.5-turbo-0301\"}}, \"results\": [{\"inputs\": {\"prompt\": \"Human: Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\\n\\nChat History:\\n[['Summarise the text', 'The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.']]\\nFollow Up Input: What is the highest-rated movie \\nStandalone question:\"}, \"outputs\": {\"gen_0\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}}], \"child_spans\": null, \"span_kind\": \"LLM\"}], \"span_kind\": \"CHAIN\"}, {\"span_id\": \"970d9c7c-6f6c-475c-a1a3-9660f7a73296\", \"name\": \"Retriever\", \"start_time_ms\": 1702400128022, \"end_time_ms\": 1702400129513, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 4}, \"results\": null, \"child_spans\": null, \"span_kind\": null}, {\"span_id\": \"dcaad58e-d3c8-4a8a-be83-ed7f65aff51a\", \"name\": \"StuffDocumentsChain\", \"start_time_ms\": 1702400129541, \"end_time_ms\": 1702400131041, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 9}, \"results\": [{\"inputs\": {\"input_document_0\": \"{\\\"page_content\\\": \\\"Bullet Train, English, Comedy, 7.6\\\\nI have not done my best yet, Korean, Comedy, 8.0\\\\nBrain Works, Korean, Comedy, 7.6\\\\nBhediya, Hindi, Comedy, 7.1\\\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\\\nThe Little Mermaid, English, Romance, 7.0\\\\nMay December, English, Romance, 7.1\\\", \\\"metadata\\\": {\\\"page\\\": 0, \\\"source\\\": \\\"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\\\"}, \\\"type\\\": \\\"Document\\\"}\", \"input_document_1\": \"{\\\"page_content\\\": \\\"Murder Mystery 2, English, Crime, 5.7\\\\nGlass Onion, English, Crime, 7.1\\\\nEnola Holmes 2, English, Crime, 6.7\\\\nShehzada, Hindi , Drama, 4.6\\\\nMission Majnu, Hindi , Drama, 7.4\\\\nLaal Singh Chadha, Hindi , Drama, 5.6\\\\nDevotion, Korean, Drama, 6.6\\\\nDream, Korean, Drama, 6.3\\\\nPrompt for Plugin: Perfect ethical issues with generative AI\\\", \\\"metadata\\\": {\\\"page\\\": 1, \\\"source\\\": \\\"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\\\"}, \\\"type\\\": \\\"Document\\\"}\", \"input_document_2\": \"{\\\"page_content\\\": \\\"related to movie selection, you should respond by stating, \\\\\\\\\\\\\\\"I am just a\\\\nMoviebot, please only ask questions related to movies.\\\\\\\\\\\\\\\" Please refer\\\\nto the list of movies provided to make your recommendations. This is\\\\nthe list of movies:\\\\nEach row represents the details about a movie, separated by comma in\\\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\\\nthe data\\\\nFast X, English, Action, 6.3\\\\n20th century girl, Korean, Drama, 7.3\\\\nThe Whale,English, Drama, 7.7\\\\nBabylon,English,Drama, 7.2\\\\nPurple Hearts, English, Drama, 6.7\\\\nMissing, English, Drama, 7\\\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\\\nJohn Wick, English, Action, 8.0\\\\nParasite, Korean, Action, 8.5\\\\nHunt, Korean, Action, 6.7\\\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\\\nIB71, Hindi, Action, 8.8\\\\nA man called Otto, English, Comedy, 7.5\\\\nBeau is Afraid, English, Comedy, 7.1\\\\nBullet Train, English, Comedy, 7.6\\\\nI have not done my best yet, Korean, Comedy, 8.0\\\\nBrain Works, Korean, Comedy, 7.6\\\\nBhediya, Hindi, Comedy, 7.1\\\", \\\"metadata\\\": {\\\"page\\\": 0, \\\"source\\\": \\\"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\\\"}, \\\"type\\\": \\\"Document\\\"}\", \"input_document_3\": \"{\\\"page_content\\\": \\\"Love Again (I), English, Romance, 5.8\\\\nAlchemy of Souls, Korean, Romance, 8.8\\\\nCrash Landing on you, Korean, Romance, 8.7\\\\nDecision to leave, Korean, Romance, 7.3\\\\nGehraiyaan, Hindi, Romance, 5.8\\\\nShiddat, Hindi, Romance, 7.6\\\\nLove Aaj Kal, Hindi, Romance, 4.6\\\\nEvil Dead Rise, English, Horror, 6.7\\\\nRenfield, English, Horror, 6.4\\\\nScream VI, English, Horror, 6.6\\\\nX (II), English, Horror, 6.6\\\\nAlive, Korean, Horror, 6.3\\\\nThe Call, Korean, Horror, 7.1\\\\nThirst, Korean, Horror, 7.1\\\\nThe Host, Korean, Horror, 7.1\\\\nGhost stories, Hindi, Horror, 4.4\\\\nU Turn, Hindi, Horror, 7.1\\\\nTumbbad, Hindi, Horror, 8.2\\\\nKillers of the Flower Moon, English, Crime, 9.6\\\\nAir, English, Drama, 7.5\\\\nDecision to Leave, Korean, Crime, 7.3\\\\nPhantom, Korean, Crime, 6.3\\\\nUnlocked, Korean, Crime, 6.4\\\\nVikram Vedha, Hindi, Crime, 7.1\\\\nDrishyam 2, Hindi, Crime, 8.2\\\\nMonica, O My Darling, Hindi, Crime, 7.4\\\\nMurder Mystery 2, English, Crime, 5.7\\\\nGlass Onion, English, Crime, 7.1\\\\nEnola Holmes 2, English, Crime, 6.7\\\\nShehzada, Hindi , Drama, 4.6\\\", \\\"metadata\\\": {\\\"page\\\": 1, \\\"source\\\": \\\"/tmp/gradio/641138745aeac79a4895e601d74333b56d78a6a3/2.9aModule-2Lesson7.pdf\\\"}, \\\"type\\\": \\\"Document\\\"}\", \"question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"chat_history\": [[\"Summarise the text\", \"The text provides a list of movies with details such as language, genre, and IMDB rating. The user is instructed to ask questions related to movies only. The movies are categorized into genres such as action, comedy, romance, horror, crime, and drama. The list includes movies from different languages such as English, Korean, and Hindi.\"]]}, \"outputs\": {\"output_text\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\"}}], \"child_spans\": [{\"span_id\": \"fba4050e-6839-4439-a6c0-7fc77e0c29ef\", \"name\": \"LLMChain\", \"start_time_ms\": 1702400129562, \"end_time_ms\": 1702400131040, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"execution_order\": 10}, \"results\": [{\"inputs\": {\"question\": \"What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\", \"context\": \"Bullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\\n\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\\n\\nrelated to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\n\\nLove Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\"}, \"outputs\": {\"text\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\"}}], \"child_spans\": [{\"span_id\": \"c46cd4e1-f8b5-4164-83e7-470f4337a95d\", \"name\": \"ChatOpenAI\", \"start_time_ms\": 1702400129568, \"end_time_ms\": 1702400131040, \"status_code\": \"SUCCESS\", \"status_message\": null, \"attributes\": {\"invocation_params\": {\"model\": \"gpt-3.5-turbo-0301\", \"model_name\": \"gpt-3.5-turbo-0301\", \"request_timeout\": null, \"max_tokens\": null, \"stream\": false, \"n\": 1, \"temperature\": 0.0, \"_type\": \"openai-chat\", \"stop\": null}, \"options\": {\"stop\": null}, \"execution_order\": 11, \"llm_output\": {\"token_usage\": {\"prompt_tokens\": 1061, \"completion_tokens\": 46, \"total_tokens\": 1107}, \"model_name\": \"gpt-3.5-turbo-0301\"}}, \"results\": [{\"inputs\": {\"prompt\": \"System: Use the following pieces of context to answer the users question. \\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\nTu Jhoothi Main Makkar, Hindi, Comedy, 6.1\\nThe Little Mermaid, English, Romance, 7.0\\nMay December, English, Romance, 7.1\\n\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nMission Majnu, Hindi , Drama, 7.4\\nLaal Singh Chadha, Hindi , Drama, 5.6\\nDevotion, Korean, Drama, 6.6\\nDream, Korean, Drama, 6.3\\nPrompt for Plugin: Perfect ethical issues with generative AI\\n\\nrelated to movie selection, you should respond by stating, \\\\\\\"I am just a\\nMoviebot, please only ask questions related to movies.\\\\\\\" Please refer\\nto the list of movies provided to make your recommendations. This is\\nthe list of movies:\\nEach row represents the details about a movie, separated by comma in\\nthis order: Name of the Movie, language, genre, IMDB Rating. Here is\\nthe data\\nFast X, English, Action, 6.3\\n20th century girl, Korean, Drama, 7.3\\nThe Whale,English, Drama, 7.7\\nBabylon,English,Drama, 7.2\\nPurple Hearts, English, Drama, 6.7\\nMissing, English, Drama, 7\\nGuardians of Galaxy Vol. 3, English, Action, 8.2\\nJohn Wick, English, Action, 8.0\\nParasite, Korean, Action, 8.5\\nHunt, Korean, Action, 6.7\\nSirf Ek Banda Kaafi hai, Hindi, Action, 7.6\\nIB71, Hindi, Action, 8.8\\nA man called Otto, English, Comedy, 7.5\\nBeau is Afraid, English, Comedy, 7.1\\nBullet Train, English, Comedy, 7.6\\nI have not done my best yet, Korean, Comedy, 8.0\\nBrain Works, Korean, Comedy, 7.6\\nBhediya, Hindi, Comedy, 7.1\\n\\nLove Again (I), English, Romance, 5.8\\nAlchemy of Souls, Korean, Romance, 8.8\\nCrash Landing on you, Korean, Romance, 8.7\\nDecision to leave, Korean, Romance, 7.3\\nGehraiyaan, Hindi, Romance, 5.8\\nShiddat, Hindi, Romance, 7.6\\nLove Aaj Kal, Hindi, Romance, 4.6\\nEvil Dead Rise, English, Horror, 6.7\\nRenfield, English, Horror, 6.4\\nScream VI, English, Horror, 6.6\\nX (II), English, Horror, 6.6\\nAlive, Korean, Horror, 6.3\\nThe Call, Korean, Horror, 7.1\\nThirst, Korean, Horror, 7.1\\nThe Host, Korean, Horror, 7.1\\nGhost stories, Hindi, Horror, 4.4\\nU Turn, Hindi, Horror, 7.1\\nTumbbad, Hindi, Horror, 8.2\\nKillers of the Flower Moon, English, Crime, 9.6\\nAir, English, Drama, 7.5\\nDecision to Leave, Korean, Crime, 7.3\\nPhantom, Korean, Crime, 6.3\\nUnlocked, Korean, Crime, 6.4\\nVikram Vedha, Hindi, Crime, 7.1\\nDrishyam 2, Hindi, Crime, 8.2\\nMonica, O My Darling, Hindi, Crime, 7.4\\nMurder Mystery 2, English, Crime, 5.7\\nGlass Onion, English, Crime, 7.1\\nEnola Holmes 2, English, Crime, 6.7\\nShehzada, Hindi , Drama, 4.6\\nHuman: What is the highest-rated movie on the list of movies provided in the text, which includes details such as language, genre, and IMDB rating, and categorizes movies into genres such as action, comedy, romance, horror, crime, and drama, and includes movies from different languages such as English, Korean, and Hindi?\"}, \"outputs\": {\"gen_0\": \"The highest-rated movie on the list of movies provided in the text is \\\"Killers of the Flower Moon\\\" with an IMDB rating of 9.6. It falls under the crime genre and is in the English language.\"}}], \"child_spans\": null, \"span_kind\": \"LLM\"}], \"span_kind\": \"CHAIN\"}], \"span_kind\": \"CHAIN\"}], \"span_kind\": \"CHAIN\"}"}, "_timestamp": 1702403731.0615592, "_runtime": 1775.7819011211395, "_step": 2}